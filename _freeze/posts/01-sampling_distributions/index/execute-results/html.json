{
  "hash": "199bbcb3a33173a79a6914f8b507b873",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini Project 1: Sampling Distribution of the Sample Minimum and Maximum\"\nauthor: \"Brody Pinto\"\ndate: \"2025-01-29\"\nembed-resources: true\nformat: html\nexecute:\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n## create population graphs\n\nnorm_df <- tibble(x = seq(3, 17, length.out = 1000),\n                  dens = dnorm(x, mean = 10, sd = 2),\n                  pop = \"normal(10, 4)\")\nunif_df <- tibble(x = seq(7, 13, length.out = 1000),\n                  dens = dunif(x, 7, 13),\n                  pop = \"uniform(7, 13)\")\nexp_df <- tibble(x = seq(0, 10, length.out = 1000),\n                 dens = dexp(x, 0.5),\n                 pop = \"exp(0.5)\")\nbeta_df <- tibble(x = seq(0, 1, length.out = 1000),\n                  dens = dbeta(x, 8, 2),\n                  pop = \"beta(8, 2)\")\n\npop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>\n  mutate(pop = fct_relevel(pop, c(\"normal(10, 4)\", \"uniform(7, 13)\",\n                                  \"exp(0.5)\", \"beta(8, 2)\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## SIMULATION CODE\n\nnsim <- 5000 # number of simulations\nn = 5 # sample size\n\n## Normal Sampling Distribution of the Sample Minimum\nmu <- 10\nsigma <- 2\n\ngenerate_samp_min_norm <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnorm_mins <- map_dbl(1:nsim, \\(i) generate_samp_min_norm(mu = mu, sigma = sigma, n = n))\n\nnorm_mins_df <- tibble(norm_mins)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = norm_mins_df, aes(x = norm_mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnorm_mins_df |>\n  summarise(mean_samp_dist = mean(norm_mins),\n            var_samp_dist = var(norm_mins),\n            sd_samp_dist = sd(norm_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           7.70          1.77         1.33\n```\n\n\n:::\n\n```{.r .cell-code}\n## Normal Sampling Distribution of the Sample Maximum\n\ngenerate_samp_max_norm <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnorm_maxs <- map_dbl(1:nsim, \\(i) generate_samp_max_norm(mu = mu, sigma = sigma, n = n))\n\nnorm_maxs_df <- tibble(norm_maxs)\n\nggplot(data = norm_maxs_df, aes(x = norm_maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnorm_maxs_df |>\n  summarise(mean_samp_dist = mean(norm_maxs),\n            var_samp_dist = var(norm_maxs),\n            sd_samp_dist = sd(norm_maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           12.3          1.78         1.33\n```\n\n\n:::\n\n```{.r .cell-code}\n## Uniform Sampling Distribution of the Sample Minimum\ntheta1 = 7\ntheta2 = 13\n\ngenerate_samp_min_unif <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nunif_mins <- map_dbl(1:nsim, \\(i) generate_samp_min_unif(theta1 = theta1, theta2 = theta2, n = n))\n\nunif_mins_df <- tibble(unif_mins)\n\nggplot(data = unif_mins_df, aes(x = unif_mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nunif_mins_df |>\n  summarise(mean_samp_dist = mean(unif_mins),\n            var_samp_dist = var(unif_mins),\n            sd_samp_dist = sd(unif_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           8.00         0.694        0.833\n```\n\n\n:::\n\n```{.r .cell-code}\n## Uniform Sampling Distribution of the Sample Maximum\n\ngenerate_samp_max_unif <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nunif_maxs <- map_dbl(1:nsim, \\(i) generate_samp_max_unif(theta1 = theta1, theta2 = theta2, n = n))\n\nunif_maxs_df <- tibble(unif_maxs)\n\nggplot(data = unif_maxs_df, aes(x = unif_maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n\n```{.r .cell-code}\nunif_maxs_df |>\n  summarise(mean_samp_dist = mean(unif_maxs),\n            var_samp_dist = var(unif_maxs),\n            sd_samp_dist = sd(unif_maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           12.0         0.711        0.843\n```\n\n\n:::\n\n```{.r .cell-code}\n## Exponential Sampling Distribution of the Sample Minimum\nlambda = 0.5\n\ngenerate_samp_min_exp <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nexp_mins <- map_dbl(1:nsim, \\(i) generate_samp_min_exp(lambda = lambda, n = n))\n\nexp_mins_df <- tibble(exp_mins)\n\nggplot(data = exp_mins_df, aes(x = exp_mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-4.png){width=672}\n:::\n\n```{.r .cell-code}\nexp_mins_df |>\n  summarise(mean_samp_dist = mean(exp_mins),\n            var_samp_dist = var(exp_mins),\n            sd_samp_dist = sd(exp_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1          0.399         0.159        0.398\n```\n\n\n:::\n\n```{.r .cell-code}\n## Exponential Sampling Distribution of the Sample Maximum\n\ngenerate_samp_max_exp <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nexp_maxs <- map_dbl(1:nsim, \\(i) generate_samp_max_exp(lambda = lambda, n = n))\n\nexp_maxs_df <- tibble(exp_maxs)\n\nggplot(data = exp_maxs_df, aes(x = exp_maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-5.png){width=672}\n:::\n\n```{.r .cell-code}\nexp_maxs_df |>\n  summarise(mean_samp_dist = mean(exp_maxs),\n            var_samp_dist = var(exp_maxs),\n            sd_samp_dist = sd(exp_maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           4.56          5.91         2.43\n```\n\n\n:::\n\n```{.r .cell-code}\n## Beta Sampling Distribution of the Sample Minimum\nalpha = 8\nbeta = 2\n\ngenerate_samp_min_beta <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nbeta_mins <- map_dbl(1:nsim, \\(i) generate_samp_min_beta(alpha = alpha, beta = beta, n = n))\n\nbeta_mins_df <- tibble(beta_mins)\n\nggplot(data = beta_mins_df, aes(x = beta_mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-6.png){width=672}\n:::\n\n```{.r .cell-code}\nbeta_mins_df |>\n  summarise(mean_samp_dist = mean(beta_mins),\n            var_samp_dist = var(beta_mins),\n            sd_samp_dist = sd(beta_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1          0.646        0.0112        0.106\n```\n\n\n:::\n\n```{.r .cell-code}\n## Beta Sampling Distribution of the Sample Maximum\n\ngenerate_samp_max_beta <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nbeta_maxs <- map_dbl(1:nsim, \\(i) generate_samp_max_beta(alpha = alpha, beta = beta, n = n))\n\nbeta_maxs_df <- tibble(beta_maxs)\n\nggplot(data = beta_maxs_df, aes(x = beta_maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-7.png){width=672}\n:::\n\n```{.r .cell-code}\nbeta_maxs_df |>\n  summarise(mean_samp_dist = mean(beta_maxs),\n            var_samp_dist = var(beta_maxs),\n            sd_samp_dist = sd(beta_maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1          0.922       0.00209       0.0457\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_plot <- bind_rows(norm_mins_df, unif_mins_df, exp_mins_df, beta_mins_df) |>\n  mutate(dist = case_when(\n    !is.na(norm_mins) ~ \"normal(10, 4)\",\n    !is.na(unif_mins) ~ \"uniform(7, 13)\",\n    !is.na(exp_mins) ~ \"exponential(0.5)\",\n    !is.na(beta_mins) ~ \"beta(8, 2)\")) |>\n  mutate(dist = fct_relevel(dist, c(\"normal(10, 4)\", \"uniform(7, 13)\", \n                                    \"exponential(0.5)\", \"beta(8, 2)\")),\n         min = pmin(norm_mins, unif_mins, exp_mins, beta_mins, na.rm = TRUE))\n\nmax_plot <- bind_rows(norm_maxs_df, unif_maxs_df, exp_maxs_df, beta_maxs_df) |>\n  mutate(dist = case_when(\n    !is.na(norm_maxs) ~ \"normal(10, 4)\",\n    !is.na(unif_maxs) ~ \"uniform(7, 13)\",\n    !is.na(exp_maxs) ~ \"exponential(0.5)\",\n    !is.na(beta_maxs) ~ \"beta(8, 2)\")) |>\n  mutate(dist = fct_relevel(dist, c(\"normal(10, 4)\", \"uniform(7, 13)\", \n                                    \"exponential(0.5)\", \"beta(8, 2)\")),\n         max = pmin(norm_maxs, unif_maxs, exp_maxs, beta_maxs, na.rm = TRUE))\n\nggplot(data = pop_plot, aes(x = x, y = dens)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Population Distributions for Each Simulation Setting\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = min_plot, aes(x = min)) +\n  geom_histogram(color = \"black\", fill = \"darkred\") +\n  theme_minimal() +\n  facet_wrap(~ dist, nrow = 1, scales = \"free\") +\n  labs(title = \"Sampling Distribution of the Sample Minimum for Each Simulation Setting\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = max_plot, aes(x = max)) +\n  geom_histogram(color = \"black\", fill = \"darkgreen\") +\n  theme_minimal() +\n  facet_wrap(~ dist, nrow = 1, scales = \"free\") +\n  labs(title = \"Sampling Distribution of the Sample Maximum for Each Simulation Setting\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n**Table of Results**\n\n|   | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$ | 7.69 | 8.01 | 0.398 | 0.646 |\n| $\\text{E}(Y_{max})$ | 12.3 | 12.0 | 4.57 | 0.924 |\n|  |  |  |  |  |\n| $\\text{SE}(Y_{min})$ | 1.32 | 0.855 | 0.402 | 0.107 |\n| $\\text{SE}(Y_{max})$ | 1.32 | 0.848 | 2.41 | 0.0454 |\n\n: Table of Results {.striped .hover}\n\n<br>\n\n**(1)** Based on the table of results above, $SE(Y_{min}) \\approx SE(Y_{max})$ for the normal and uniform distributions and *not* for the exponential and beta distributions. This may be because the normal and uniform distributions are symmetric distributions whereas the exponential and beta distributions are not symmetric.\n\n<br>\n\n**(2)** Calculations for $Exp(\\lambda = 0.5), n = 5$.\n\n**PDF and CDF for** $Exp(\\lambda = 0.5)$:\n\n$f(y) = 0.5e^{-0.5y}, y > 0$\n\n$F(y) = 1-e^{-0.5y}, y > 0 \\space \\text{since} \\space \\int_0^y 0.5e^{-0.5y}dy = 1-e^{-0.5y}$\n\n<br>\n\n**PDF for** $Y_{min}$:\n\n$f_{min}(y) = n(1-F(y))^{n-1}f(y)$\n\n$f_{min}(y) = 5(1-(1-e^{-0.5y}))^4(0.5e^{-0.5y})$ simplifies to...\n\n$f_{min}(y) = 2.5e^{-2.5y}, y > 0$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\ny <- seq(0, 3, length.out = 1000)\n\n## NOTE: this is not a proper density (it does not integrate to 1).\ndensity <- 2.5 * exp(-(2.5) * y)\n\n## put into tibble and plot\nsamp_min_df <- tibble(y, density)\nggplot(data = samp_min_df, aes(x = y, y = density)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"PDF for Exponential(0.5), Ymin\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n**PDF for** $Y_{max}$:\n\n$f_{max}(y) = n(F(y))^{n-1}f(y)$\n\n$f_{max}(y) = 5(1-e^{-0.5y})^4(0.5e^{-0.5y})$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\ny <- seq(0, 15, length.out = 1000)\n\n## NOTE: this is not a proper density (it does not integrate to 1).\ndensity <- 5 * (1 - exp(-(0.5) * y)) ^ 4 * (0.5*exp(-(0.5)*y))\n\n## put into tibble and plot\nsamp_min_df <- tibble(y, density)\nggplot(data = samp_min_df, aes(x = y, y = density)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"PDF for Exponential(0.5), Ymax\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n<br>\n\n**Expected Value and Standard Error for** $Y_{min}$:\n\n$E(Y_{min}) = \\int_0^{\\infty}y(2.5e^{-2.5y})dy = 0.4$\n\n$E(Y_{min}^2) = \\int_0^{\\infty}y^2(2.5e^{-2.5y})dy = 0.32$\n\n$Var(Y_{min}) = E(Y_{min}^2) - E(Y_{min})^2 = 0.32 - 0.4^2 = 0.16$\n\n$SE(Y_{min}) = \\sqrt{Var(Y_{min})} = \\sqrt{0.16} = 0.4$\n\n**Expected Value and Standard Error for** $Y_{max}$:\n\n$E(Y_{max}) = \\int_0^{\\infty}5y(1-e^{-0.5y})^4(0.5e^{-0.5y})dy = 4.57$\n\n$E(Y_{max}^2) = \\int_0^{\\infty}5y^2(1-e^{-0.5y})^4(0.5e^{-0.5y})dy = 26.7089$\n\n$Var(Y_{max}) = E(Y_{max}^2) - E(Y_{max})^2 = 26.7089 - 4.57^2 = 5.824$\n\n$SE(Y_{max}) = \\sqrt{Var(Y_{max})} = \\sqrt{5.824} = 2.41$\n\n<br>\n\n**Brief Conclusion**: These theoretical values for expectation and standard error are very similar to the simulated values for the exponential(0.5) distribution. This is reassuring because the theory backs up the results we drew from the simulation.\n\n<br>\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}